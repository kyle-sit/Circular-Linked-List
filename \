/**************************************************************************** 
 
                                                        Kyle Sit 
                                                        CSE 12, Fall 
                                                        28 October 2015 
                                                        cs12xgj 
                                Assignment Five 
 
File Name:      list.c 
Description:    This program contains methods that manipulate linked lists to 
		use as a generic container.
****************************************************************************/

#include <malloc.h>
#include <stdio.h>
#include "mylib.h"
#include "list.h"

typedef struct Node {
        struct Node * pre;      /* how to access the prior Node */
        struct Node * next;     /* how to access the next Node */
        void * data;            /* the data to store */
} Node;

typedef struct List {
        Node * end;             /* the end of the list */
        long list_count;        /* which list is it */
        long occupancy;
        void *(*copy_func) (void *);
        void (*delete_func) (void *);
        FILE *(*write_func) (void *, FILE *);
} List;

/* private Node function declarations */
static long check_to_go_forward (List * this_list, long where);
static void delete_Node (Node **, void (*delete_func) (void *));
static void find_location (List * this_list, long where);
static Node * insert_Node (Node *, void *, void *(*copy_func) (void *)); 
static Node * new_Node (void *, void *(*copy_func) (void *));
static void * remove_Node (Node *);
static void * view_Node (Node *); 
static FILE * write_Node (Node *, FILE *, FILE *(*write_func) (void *, FILE *));

/* catastrophic error messages */
static const char ADNEXT_NONEXIST[] = 
                "Advance next from non-existent list!!!\n";
static const char ADNEXT_EMPTY[] = 
                "Advance next from empty list!!!\n";
static const char ADPRE_NONEXIST[] = 
                "Advance pre from non-existent list!!!\n";
static const char ADPRE_EMPTY[] = 
                "Advance pre from empty list!!!\n";
static const char CHECK_NONEXIST[] =
                "Checking direction on non-existent list!!!\n";
static const char DELETE_NONEXIST[] =
                "Deleting from non-existent list!!!\n";
static const char DELETE_NONEXISTNODE[] =
                "Deleting a non-existent node!!!\n";
static const char ISEMPTY_NONEXIST[] =
                "Is empty check from non-existent list!!!\n";
static const char INSERT_NONEXIST[] =
                "Inserting to a non-existent list!!!\n";
static const char REMOVE_NONEXIST[] =
                "Removing from non-existent list!!!\n";
static const char REMOVE_EMPTY[] =
                "Remove from empty list!!!\n";
static const char VIEW_NONEXIST[] = 
                "Viewing a non-existent list!!!\n";
static const char VIEW_NONEXISTNODE[] = 
                "Viewing a non-existent node!!!\n";
static const char VIEW_EMPTY[] =
                "Viewing an empty list!!!\n";
static const char WRITE_NONEXISTFILE[] =
                "Writing to a non-existent file!!!\n";
static const char WRITE_NONEXISTLIST[] =
                "Writing from a non-existent list!!!\n";
static const char WRITE_MISSINGFUNC[] =
                "Don't know how to write out elements!!!\n";
static const char WRITE_NONEXISTNODE[] =
                "Writing from a non-existent node!!!\n";

/* debug messages */
static const char ADNEXT[] = "[List %ld - Advancing next]\n";
static const char ADPRE[] = "[List %ld - Advancing pre]\n";
static const char INSERT[] = "[List %ld - Inserting node]\n";
static const char REMOVE[] = "[List %ld - Removing node]\n";
static const char VIEW[] = "[List %ld - Viewing node]\n";
static const char LIST_ALLOCATE[] = "[List %ld has been allocated]\n";
static const char LIST_DEALLOCATE[] = "[List %ld has been deallocated]\n";

static int debug_on = FALSE;    /* allocation of debug flag */
static long list_counter = 0;   /* the number of lists allocated so far */

void set_debug_off (void) {
        debug_on = FALSE;
}

void set_debug_on (void) {
        debug_on = TRUE;
}

/*-------------------------------------------------------------------------- 
Function Name:         advance_next_List
Purpose:               Shifts the elements of the list backwards by one. 
Description:           In setting the list's end pointer forward by a node,
		       each element preceding it moves back in the list.
Input:                 @param this_List is the list to be modified
Result:                No return but we should end up with a shifted list.
--------------------------------------------------------------------------*/
void advance_next_List (List * this_list) {
        /* Check for null list */
	if( !this_list ) {
		/* Print error if debug is on */
		if( debug_on ) {
			fprintf(stderr, ADNEXT_NONEXIST);
			return;
		}
	
	}

	/* Check for empty list */
	if( isempty_List ) {
		/* Print error if debug is on */
		if( debug_on ) {
			fprintf(stderr, ADNEXT_EMPTY);
			return;
		}
	
	}
	
	else {
		/* If validity checks pass then we set the end of the list
		 * one forward */
		this_list->end = *(this_list->end->pre);
	}
}

/*-------------------------------------------------------------------------- 
Function Name:         advance_pre_List
Purpose:               Shifts the elements of the list forward by one. 
Description:           In setting the list's end pointer backward by a node,
		       each element preceding it moves forward in the list.
Input:                 @param this_List is the list to be modified.
Result:                No return but we should end up with a shifted list.
--------------------------------------------------------------------------*/
void advance_pre_List (List * this_list) {
        /* Check for null list */
	if( !this_list ) {
		/* Print error if debug is on */
		if( debug_on ) {
			fprintf(stderr, ADPRE_NONEXIST);
			return;
		}

	}
	/* Check for an empty list */
	if( isempty_List ) {
		/* Print error if debug is on */
		if( debug_on ) {
			fprintf(stderr, ADPRE_EMPTY);
			return;
		}

	}
	
	else {
		/* If validity checks pass then we set the end of the list 
		 * one backward */
		this_list->end = *(this_list->end->next);
	}
}

/*-------------------------------------------------------------------------- 
Function Name:         check_to_go_forward
Purpose:	       Checks whether it is more efficient to reach item 
		       where by looping forward or backwards from end.
Description:           Using where and the list occupancy we can deduce whether
		       it is faster to go forward (if where is less than half
		       the occupancy) or backward (if the occupancy is more 
		       than half the occupancy).
Input:                 @param this_List is the list to search through
		       @param where is the place location of the node we want
Result:                We return true if we want to loop forward and false 
		       if we want to loop backward.
--------------------------------------------------------------------------*/
static long check_to_go_forward (List * this_list, long where) {
	/* Firt we check for a null list */
	if( !this_list ) {
		/* Print error if debug is on */
		if( debug_on ) {
			fprintf( stderr, CHECK_NONEXIST );
			return 0;
		}

	}
	/* If list is not null we begin check to go forward or backward */
	else {
		/* initialize div to use in special case */
		long div = NULL;
		
		/* If the location we want is higher than list occupancy */
		if(where > this_list->occupancy) {
			/* We mod where by occupancy to get a remainder that 
			 * will be used to check if it is below or above 
			 * occupancy/2 */
			div = where % this_list->occupancy;

			/* If div is less than half occupancy we want to move
			 * forward */
			if( div <= (this_list->occupancy/2) ) {
				return 1;
			}
			/* If div is more than half occupancy we want to loop
			 * backward */
			else {
				return 0;
			}
		
		}
		/* If where is less than occupancy we dont need to mod */
		else {
			/* If where is less that half occupancy we want to 
			 * move forward */
			if( where <= (this_list->occupancy/2) ) {
				return 1;
			}
			/* If where is more than half occupancy we want to 
			 * loop backward */
			else {
				return 0;
			}
		
		}
	}
}

/*-------------------------------------------------------------------------- 
Function Name:         delete_List
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
void delete_List (List ** lpp) {
        /* YOUR CODE GOES HERE */
}

/*-------------------------------------------------------------------------- 
Function Name:         find_Location
Purpose:               This method locates the node that we want to insert
		       our element after.
Description:           To maximize effiency we first determine if we want to
		       loop forward or backward.  Once that is established we
		       set a local node to the next or pre node in a loop 
		       several times over until we reach the desired one.
Input:                 @param this_List is the list to search through
		       @param where is the location of the node in the list
Result:                We return the node we want to insert after.
--------------------------------------------------------------------------*/
static void find_location (List * this_list, long where) {
        /* Initialize one node and longs for use in the loop, we use find for
	 * looping forward or backward */
	Node *find = *this_list->end;
	long index = 0;
	long div = 0;
	
	/* If where is 0 or equal to occupancy then we are looking for the 
	 * end node and we just return it */
	if( where == 0 || where == this_list->occupancy ) {
		return this_list->end;
	}

	/* If where is more than occupancy we need the div from modulus */
	if( where > this_list->occupancy ) { 
		div = where % this_list->occupancy;
	}

	/* If check tells us we need to loop forward */
	if( check_to_go_forward(this_list, where) ) {
		/* If where is more than occupancy we need to use div */
		if( where > this_list->occupancy ) {
			/* loop forward until div setting find equal to next
			 * node in the list */
			for( index; index < div; index++ ) {
				find = *(find->next);
			}
			/* Once we've found the node we reset end and return */
			this_list->end = *find;
			return find;
		}
		/* where is not more than occupancy */
		else {
			/* loop forward until whhere setting find equal to
			 * the next node in the list */
			for( index; index < where; 
			     index++ ) {
				find = *(find->next);
			}
			/* reset end and return */
			this_list->end = *find;
			return find;
		}
	
	}
	/* We need to loop backward */
	else {
		/* If where is more than the occupancy we use div */
		if( where > this_list->occupancy ) {
			/* Loop until we reach occupancy-div setting find to 
			 * the node before */
			for( index; 
			     index < (this_list->occupancy - div)
			     index++ ) {
				find = *(find->pre);
			}
			/* reset end and return */
			this_list->end = *find;
			return find;
		
		}
		
		/* where is less than occupancy */
		else {
			/* Loop until we reach occupancy-where setting find to
			 * the node before */
			for( index; 
			     index < (this_list->occupancy - where);
			     index++ ) {
				find = find->pre;
			}
			/* reset end and return */
			this_list->end = *find;
			return find;
			
		     }
		
	      }
       } 
}

/*-------------------------------------------------------------------------- 
Function Name:         insert
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
long insert (List * this_list, void * element, long where) {
	if( !this_list) {
		if( debug_on ) {
			fprintf(stderr, INSERT_NONEXIST);
		}
	}
	if( where == 0 ) {
		
	}
	Node *this_Node = find_location(this_list, where);
	Node *Node_to_insert = insert_Node(this_Node, element, 
					   this_Node-> copy_func);
	
}
 
/*-------------------------------------------------------------------------- 
Function Name:         isempty_List
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
long isempty_List (List * this_list) {
        if( this_list->end == NULL && this_list->occupancy == 0) {
		return true;
	}
	else {
		return false;
	}
}

/*-------------------------------------------------------------------------- 
Function Name:         new_List
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
List * new_List (
        void *(*copy_func) (void *),
        void (*delete_func) (void *),
        FILE *(*write_func) (void *, FILE *)) {
	
	/* Allocation of the new list */
        List *this_list = (List *) malloc (sizeof(List));
	
	/* Initialization of data fields */
	this_list->end = NULL;
	this_list->list_count = ++list_counter;
	this_list->occupancy = 0;
	this_list->copy_func = copy_func;
	this_list->delete_func = delete_func;
	this_list->write_func = write_func;
	
	/* Return the pointer to the list */
	return this_list;

}

/*-------------------------------------------------------------------------- 
Function Name:         remove_List
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
void * remove_List (List * this_list, long where) {
        /* YOUR CODE GOES HERE */
}

/*-------------------------------------------------------------------------- 
Function Name:         view
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
void * view (List * this_list, long where) {
        /* YOUR CODE GOES HERE */
}

/*-------------------------------------------------------------------------- 
Function Name:         write_List
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
FILE * write_List (List * this_list, FILE * stream) {
        long count;             /* to know how many elements to print */
        Node * working;                 /* working node */

        if (!stream) {
                fprintf (stderr, WRITE_NONEXISTFILE);
                return NULL;
        }

        if (!this_list) {
                fprintf (stderr, WRITE_NONEXISTLIST);
                return NULL;
        }

        if (stream == stderr)
                fprintf (stream, "List %ld has %ld items in it.\n",
                        this_list->list_count, this_list->occupancy);

        if (!this_list->write_func) {
                fprintf (stream, WRITE_MISSINGFUNC);
                return stream;
        }

        if (this_list->occupancy >= 1)
                working = this_list->end->next;

        for (count = 1; count <= this_list->occupancy; count++) {
                if (stream == stderr)
                        fprintf (stream, "\nelement %ld:  ", count);
                write_Node (working, stream, this_list->write_func);
                working = working->next;
        }
                
        return stream;
}

/*-------------------------------------------------------------------------- 
Function Name:         write_reverse_List
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
FILE * write_reverse_List (List * this_list, FILE * stream) {
        /* YOUR CODE GOES HERE */
}

/*-------------------------------------------------------------------------- 
Function Name:         delete_Node
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
static void delete_Node (Node ** npp, void (*delete_func) (void *)) {

        /* does the node exist??? */
        if (!npp || !*npp) {
                fprintf (stderr, DELETE_NONEXISTNODE);
                return;
        }

        /* call function to delete element */
        if (delete_func && (*npp)->data)
                (*delete_func) (&((*npp)->data));

        /* delete element */
        free (*npp);

        /* assign node to NULL */
        *npp = NULL;
}

/*-------------------------------------------------------------------------- 
Function Name:         insert_Node
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
static Node * insert_Node (Node * this_Node, void * element, 
        void * (*copy_func) (void *)) {
	Node *working = new_Node(element, copy_func);

	if( !this_Node ) {
		working->pre = working->next = working;
		return working;
	}
	else {
		working->pre = this_node;
		working->next = this_node->next;

		this_node->next = working;
		working->next->pre = working;
		
		return working;
	}
}

/*-------------------------------------------------------------------------- 
Function Name:         new_Node
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
static Node* new_Node (void * element, void * (*copy_func) (void *)) {

        /* allocate memory */
        Node *this_Node = (Node *) malloc (sizeof (Node));

        /* initialize memory */
        this_Node->next = this_Node->pre = NULL;
        this_Node->data = (copy_func) ? (*copy_func) (element) : element;

        return this_Node;
}

/*-------------------------------------------------------------------------- 
Function Name:         remove_Node
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
static void * remove_Node (Node * this_Node) {
        /* YOUR CODE GOES HERE */ 
}

/*-------------------------------------------------------------------------- 
Function Name:         view_Node
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
static void * view_Node (Node * this_Node) {
        /* YOUR CODE GOES HERE */
}

/*-------------------------------------------------------------------------- 
Function Name:         write_Node
Purpose:               This method takes the stack from intopost and evaluates
		       the function initially inputted. 
Description:           First we reverse stack 1 onto stack 2. Then we move 
		       digits back to stack 1, taking operators from stack 2
		       and performing that operator function on the values in 
		       stack 1. The operator functions follow precdence.
Input:                 @param stack1 is a pointer to the stack containing the 
		       expression in postfix order.
Result:                We should return the final evaluation of the initial
		       expression.
--------------------------------------------------------------------------*/
static FILE* write_Node (Node * this_Node, FILE * stream,
        FILE * (*write_func) (void *, FILE *)) {

        if (!stream) {
                fprintf (stderr, WRITE_NONEXISTFILE);
                return NULL;
        }

        if (!this_Node) {
                fprintf (stream, WRITE_NONEXISTNODE);
                return stream;
        }

        if (!write_func) {
                fprintf (stream, WRITE_MISSINGFUNC);
                return stream;
        }

        return (*write_func) (this_Node->data, stream);
}
